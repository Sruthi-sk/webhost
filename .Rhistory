trees.genus <- trees.genus %>%   # overwriting our data frame
mutate(Height.cat =   # creating our new column
case_when(Height %in% c("Up to 5 meters", "5 to 10 meters") ~ "Short",
Height %in% c("10 to 15 meters", "15 to 20 meters") ~ "Medium",
Height %in% c("20 to 25 meters", "Over 12 meters") ~ "Tall")
)
# Reordering factors levels
trees.genus$Height.cat <- as.factor(trees.genus$Height.cat)
levels(trees.genus$Height.cat) # In alphabetical order
trees.genus$Height.cat <- factor(trees.genus$Height.cat,
levels = c('Short','Medium','Tall'))
NW_limits <- filter(trees.genus, (trees.genus$Northing < max(trees.genus$Northing)) &
(trees.genus$Northing > lower_limit_northern) &
(trees.genus$Easting < max(trees.genus$Easting)) &
(trees.genus$Easting > lower_limit_eastern)
)
View(NW_limits)
# Challenge
lower_limit_eastern <- max(trees.genus$Easting) - (max(trees.genus$Easting) - min(trees.genus$Easting))/2
lower_limit_northern <- max(trees.genus$Northing) - (max(trees.genus$Northing) - min(trees.genus$Northing))/2
lower_limit_x <- max(trees.genus$Easting) - (max(trees.genus$Easting) - min(trees.genus$Easting))/2
lower_limit_y <- max(trees.genus$Northing) - (max(trees.genus$Northing) - min(trees.genus$Northing))/2
# Challenge
lower_limit_x <- max(trees.genus$Easting) - (max(trees.genus$Easting) - min(trees.genus$Easting))/2
lower_limit_y <- max(trees.genus$Northing) - (max(trees.genus$Northing) - min(trees.genus$Northing))/2
tree.genus <- tree.genus %>%
mutate(Quadrant = case_when(
Easting < lower_limit_x & Northing < lower_limit_y ~ 'SW',
Easting < lower_limit_x & Northing > lower_limit_y ~ 'NW',
Easting > lower_limit_x & Northing < lower_limit_y ~ 'SE',
Easting > lower_limit_x & Northing > lower_limit_y ~ 'NE',)
)
lower_limit_x <- max(trees.genus$Easting) - (max(trees.genus$Easting) - min(trees.genus$Easting))/2
lower_limit_y <- max(trees.genus$Northing) - (max(trees.genus$Northing) - min(trees.genus$Northing))/2
trees.genus <- trees.genus %>%
mutate(Quadrant = case_when(
Easting < lower_limit_x & Northing < lower_limit_y ~ 'SW',
Easting < lower_limit_x & Northing > lower_limit_y ~ 'NW',
Easting > lower_limit_x & Northing < lower_limit_y ~ 'SE',
Easting > lower_limit_x & Northing > lower_limit_y ~ 'NE',)
)
library(dplyr)
library(ggplot2)
library(tidyr)
# Load the data
trees <- read.csv('trees.csv', header = TRUE)
trees.genus <- trees %>%
mutate(Genus = case_when(               # creates the genus column and specifies conditions
grepl("Acer", LatinName) ~ "Acer",
grepl("Fraxinus", LatinName) ~ "Fraxinus",
grepl("Sorbus", LatinName) ~ "Sorbus",
grepl("Betula", LatinName) ~ "Betula",
grepl("Populus", LatinName) ~ "Populus",
grepl("Laburnum", LatinName) ~ "Laburnum",
grepl("Aesculus", LatinName) ~ "Aesculus",
grepl("Fagus", LatinName) ~ "Fagus",
grepl("Prunus", LatinName) ~ "Prunus",
grepl("Pinus", LatinName) ~ "Pinus",
grepl("Sambucus", LatinName) ~ "Sambucus",
grepl("Crataegus", LatinName) ~ "Crataegus",
grepl("Ilex", LatinName) ~ "Ilex",
grepl("Quercus", LatinName) ~ "Quercus",
grepl("Larix", LatinName) ~ "Larix",
grepl("Salix", LatinName) ~ "Salix",
grepl("Alnus", LatinName) ~ "Alnus")
)
trees.genus <- trees.genus %>%   # overwriting our data frame
mutate(Height.cat =   # creating our new column
case_when(Height %in% c("Up to 5 meters", "5 to 10 meters") ~ "Short",
Height %in% c("10 to 15 meters", "15 to 20 meters") ~ "Medium",
Height %in% c("20 to 25 meters", "Over 12 meters") ~ "Tall")
)
# Reordering factors levels
trees.genus$Height.cat <- as.factor(trees.genus$Height.cat)
levels(trees.genus$Height.cat) # In alphabetical order
trees.genus$Height.cat <- factor(trees.genus$Height.cat,
levels = c('Short','Medium','Tall'))
lower_limit_x <- max(trees.genus$Easting) - (max(trees.genus$Easting) - min(trees.genus$Easting))/2
lower_limit_y <- max(trees.genus$Northing) - (max(trees.genus$Northing) - min(trees.genus$Northing))/2
trees.genus_challenge <- trees.genus %>%
mutate(Quadrant = case_when(
Easting < lower_limit_x & Northing < lower_limit_y ~ 'SW',
Easting < lower_limit_x & Northing > lower_limit_y ~ 'NW',
Easting > lower_limit_x & Northing < lower_limit_y ~ 'SE',
Easting > lower_limit_x & Northing > lower_limit_y ~ 'NE',)
)
ggplot(trees.genus) +
geom_point(x = Easting, y = Northing, color = Quadrant) +
theme_dark()
View(trees.genus)
ggplot(trees.genus) +
geom_point(aes(x = Easting, y = Northing), color = Quadrant) +
theme_dark()
ggplot(trees.genus) +
geom_point(aes(x = Easting, y = Northing, colour = Quadrant))+
theme_dark()
ggplot(trees.genus_challenge) +
geom_point(aes(x = Easting, y = Northing, colour = Quadrant))+
theme_dark()
ggplot(trees.genus_challenge) +
geom_point(aes(x = Easting, y = Northing, colour = Quadrant))+
theme_light()
ggplot(trees.genus_challenge) +
geom_point(aes(x = Easting, y = Northing, colour = Quadrant))+
theme_bw()
ggplot(trees.genus_challenge) +
geom_point(aes(x = Easting, y = Northing, colour = Quadrant))+
geom_vline(xintercept = lower_limit_x, linetype="dotted", color = "steelblue", size=1)
theme_bw()
ggplot(trees.genus_challenge) +
geom_point(aes(x = Easting, y = Northing, colour = Quadrant))+
geom_vline(xintercept = lower_limit_x, linetype="dotted", color = "steelblue", size=0.5)
geom_hline(xintercept = lower_limit_y, linetype="dotted", color = "steelblue", size=0.5)
theme_bw()
ggplot(trees.genus_challenge) +
geom_point(aes(x = Easting, y = Northing, colour = Quadrant))+
geom_vline(xintercept = lower_limit_x, linetype="dotted", color = "steelblue", size=0.5)
geom_hline(yintercept = lower_limit_y, linetype="dotted", color = "steelblue", size=0.5)
theme_bw()
ggplot(trees.genus_challenge) +
geom_point(aes(x = Easting, y = Northing, colour = Quadrant))+
geom_vline(xintercept = lower_limit_x, linetype="dotted", color = "steelblue", size=0.5)+
geom_hline(yintercept = lower_limit_y, linetype="dotted", color = "steelblue", size=0.5)
theme_bw()
trees.genus_challenge <- trees.genus %>%
mutate(Quadrant = case_when(
Easting <= lower_limit_x & Northing < lower_limit_y ~ 'SW',
Easting <= lower_limit_x & Northing > lower_limit_y ~ 'NW',
Easting >= lower_limit_x & Northing < lower_limit_y ~ 'SE',
Easting >= lower_limit_x & Northing > lower_limit_y ~ 'NE',)
)
ggplot(trees.genus_challenge) +
geom_point(aes(x = Easting, y = Northing, colour = Quadrant))+
geom_vline(xintercept = lower_limit_x, linetype="dotted", color = "steelblue", size=0.5)+
geom_hline(yintercept = lower_limit_y, linetype="dotted", color = "steelblue", size=0.5)
theme_bw()
species_ruch <- trees.genus_challenge %>%
group_by(Quadrant) %>%
summarise(n())
trees.genus_challenge %>%
group_by(Quadrant) %>%
summarise(n())
species_rich <- trees.genus_challenge %>%
group_by(Quadrant) %>%
summarise(n())
species_rich <- trees.genus_challenge %>%
group_by(Quadrant) %>%
summarise(unique(n()))
species_rich
species_rich <- trees.genus_challenge %>%
group_by(Quadrant) %>%
summarise(richness = length(unique(LatinName)))
species_rich
View(trees.genus_challenge)
# Each quadrant, bar plot showing counts of Acer trees in different age classes
acer <- trees.genus_challenge %>% filter (Genus = 'Acer')
# Each quadrant, bar plot showing counts of Acer trees in different age classes
acer <- trees.genus_challenge %>% filter (Genus == 'Acer')
View(acer)
acer <- acer %>%   # overwriting our data frame
mutate(AgeGroup =   # creating our new column
case_when(AgeGroup %in% c("Juvenile", "Semi-mature") ~ "Young",
AgeGroup == ("Middle Aged") ~ "Middle Aged",
AgeGroup == ("Mature") ~ "Mature")
)
acer$AgeGroup <- as.factor(acer$AgeGroup)
View(acer)
levels(acer$AgeGroup)
acer <- trees.genus_challenge %>% filter (Genus == 'Acer')
acer$AgeGroup <- as.factor(acer$AgeGroup)
acer <- acer %>%   # overwriting our data frame
mutate(AgeGroup =   # creating our new column
case_when(AgeGroup %in% c("Juvenile", "Semi-mature") ~ "Young",
AgeGroup == ("Middle Aged") ~ "Middle Aged",
AgeGroup == ("Mature") ~ "Mature")
)
levels(acer$AgeGroup)
View(acer)
acer <- trees.genus_challenge %>% filter (Genus == 'Acer')
acer <- acer %>%   # overwriting our data frame
mutate(AgeGroup =   # creating our new column
case_when(AgeGroup %in% c("Juvenile", "Semi-mature") ~ "Young",
AgeGroup == ("Middle Aged") ~ "Middle Aged",
AgeGroup == ("Mature") ~ "Mature")
)
acer$AgeGroup <- factor(acer$AgeGroup,
levels = c('Young','Middle Aged','Mature'))
View(acer)
acer %>%  ggplot() +
geom_bar(aes(x = AgeGroup, y = summarise(n()), color = Quadrant) )
theme_bw()
acer.plots <- acer %>%
group_by(Quadrant) %>%
do(plots =
ggplot(data = .) +
geom_bar(aes(x = AgeGroup)) +
theme_bw()
)
acer.plots
acer.plots$plots
acer.plots <- acer %>%
group_by(Quadrant) %>%
do(plots =
ggplot(data = .) +
geom_bar(aes(x = AgeGroup), color = AgeGroup) +
theme_bw()
)
acer.plots <- acer %>%
group_by(Quadrant) %>%
do(plots =
ggplot(data = .) +
geom_bar(aes(x = AgeGroup), color = acer$AgeGroup) +
theme_bw()
)
acer.plots$plots
acer.plots <- acer %>%
group_by(Quadrant) %>%
do(plots =
ggplot(data = .) +
geom_bar(aes(x = AgeGroup, color = AgeGroup)) +
theme_bw()
)
acer.plots$plots[1]
acer.plots <- acer %>%
group_by(Quadrant) %>%
do(plots =
ggplot(data = .) +
geom_bar(aes(x = AgeGroup, fill = AgeGroup)) +
theme_bw()
)
acer.plots$plots[1]
acer.plots <- acer %>%
group_by(Quadrant) %>%
do(plots =           # the plotting call within the do function
ggplot(data = .) +
geom_bar(aes(x = AgeGroup, color = AgeGroup)) +
labs(title = paste('Age distribution of Acer in ', .$Quadrant, ' corner', sep = ''),
x = 'Age group', y = 'Number of trees') +
theme_bw() +
theme(panel.grid = element_blank(),
axis.title = element_text(size = 14),
axis.text = element_text(size = 14),
plot.title = element_text(hjust = 0.5))
)
acer.plots$plots[1]
acer.plots <- acer %>%
group_by(Quadrant) %>%
do(plots =           # the plotting call within the do function
ggplot(data = .) +
geom_bar(aes(x = AgeGroup, fill = AgeGroup)) +
labs(title = paste('Age distribution of Acer in ', .$Quadrant, ' corner', sep = ''),
x = 'Age group', y = 'Number of trees') +
theme_bw() +
theme(panel.grid = element_blank(),
axis.title = element_text(size = 14),
axis.text = element_text(size = 14),
plot.title = element_text(hjust = 0.5))
)
acer.plots$plots[1]
acer.plots$plots[2]
library(patchwork)
(acer.plots$plots[1] | acer.plots$plots[2]) / acer.plots$plots[3] |acer.plots$plots[4]
(acer.plots$plots[1] | acer.plots$plots[2]) / (a)cer.plots$plots[3] |acer.plots$plots[4])
(acer.plots$plots[1] | acer.plots$plots[2]) / (acer.plots$plots[3] | acer.plots$plots[4])
p1 <- acer.plots$plots[1]
p1 <- acer.plots$plots[1]
p2 <- acer.plots$plots[2]
p3 <- acer.plots$plots[3]
p4 <- acer.plots$plots[4]
p1
(p1 | p2 )
(p1 | p2 )
(p1 | p2 ) / (p3 | p4)
p1 + p1
p1 + p2
View(p1)
p1
p2
p1[1]
p1[1] + p2[2]
p1[[1]] + p2[[2]]
wrap_plots(list(p1,p2), nrow=1)
wrap_plots(acer.plots$plots, nrow=1)
wrap_plots(acer.plots$plots, nrow=2)
# Data viz 1 and 2
library(ggplot2)
setwd("~/Garage/CodingClub/CC_course_stream2-master/02_Data_vis_1")
library(tidyr)
library(readr)
library(gridExtra)
library(dplyr)
LPI <- read_csv('LPIdata_CC.csv')
# Understanding data
head(LPI)
names(LPI)
summarise(LPI)
yo <- summarise(LPI)
View(LPI)
LIP2 <- gather(LPI, "year", "abundance", 9:53)
View(LIP2)
View(LPI)
View(LIP2)
View(LPI)
View(LIP2)
class(LIP2$year)
LPI2 <- gather(LPI, "year", "abundance", 9:53)
LPI2$year <- parse_number(LPI2$year)
# Converting characters to numeric
LPI2$year <- parse_number(LPI2$year)
# Converting characters to numeric
LPI2$year <- as.numeric(LPI2$year)
class(LPI2$year)
LPI2$abundance <- as.numeric(LPI2$abundance)
View(LIP2)
unique(LPI2$Common.Name)
View(LIP2)
unique(LPI2$Common Name)
unique(LPI2$`Common Name`)
vulture <- filter(LPI2, Common.Name == "Griffon vulture / Eurasian griffon")
vulture <- filter(LPI2,`'Common Name` == "Griffon vulture / Eurasian griffon")
vulture <- filter(LPI2,`Common Name` == "Griffon vulture / Eurasian griffon")
View(vulture)
head(vulture)
# There are a lot of NAs in this dataframe, so we will get rid of the empty rows using na.omit()
vulture <- na.omit(vulture)
head(vulture)
View(vulture)
vulture_hist <- ggplot(vulture) +
geom_histogram(x = abundance)
vulture_hist <- ggplot(vulture) +
geom_histogram(x = vuture$abundance)
vulture_hist <- ggplot(vulture) +
geom_histogram(x = vulture$abundance)
vulture_hist
vulture_hist <- ggplot(vulture) +
geom_histogram(y = vulture$abundance)
vulture_hist
vulture_hist <- ggplot(vulture, aes(x = abundance)) +
geom_histogram()
vulture_hist
vulture_hist <- ggplot(vulture, aes(x = abundance)) +
geom_histogram(color = 'steelblue')
vulture_hist
vulture_hist <- ggplot(vulture, aes(x = abundance)) +
geom_histogram(fill = 'steelblue')
vulture_hist
vulture_hist <- ggplot(vulture, aes(x = abundance)) +
geom_histogram(fill = 'steelblue')
(vulture_hist <- ggplot(vulture, aes(x = abundance)) +
geom_histogram(binwidth = 250, colour = "#8B5A00", fill = "#CD8500") +    # Changing the binwidth and colours
geom_vline(aes(xintercept = mean(abundance)),                       # Adding a line for mean abundance
colour = "red", linetype = "dashed", size=1) +           # Changing the look of the line
theme_bw() +                                                      # Changing the theme to get rid of the grey background
ylab("Count\n") +                                                   # Changing the text of the y axis label
xlab("\nGriffon vulture abundance")  +                              # \n adds a blank line between axis and text
theme(axis.text = element_text(size = 12),                          # Changing font size of axis labels and title
axis.title.x = element_text(size = 14, face = "plain"),       # face="plain" is the default, you can change it to italic, bold, etc.
panel.grid = element_blank(),                                 # Removing the grey grid lines
plot.margin = unit(c(1,1,1,1), units = , "cm")))              # Putting a 1 cm margin around the plot
# We can see from the histogram that the data are very skewed - a typical distribution of count abundance data
(vulture_hist <- ggplot(vulture, aes(x = abundance)) +
geom_histogram(binwidth = 250, colour = "#8B5A00", fill = "#CD8500") +    # Changing the binwidth and colours
geom_vline(aes(xintercept = mean(abundance)),                       # Adding a line for mean abundance
colour = "red", linetype = "dashed", size = 0.5) +           # Changing the look of the line
theme_bw() +                                                      # Changing the theme to get rid of the grey background
ylab("Count\n") +                                                   # Changing the text of the y axis label
xlab("\nGriffon vulture abundance")  +                              # \n adds a blank line between axis and text
theme(axis.text = element_text(size = 14),                          # Changing font size of axis labels and title
axis.title.x = element_text(size = 14, face = "plain"),       # face="plain" is the default, you can change it to italic, bold, etc.
panel.grid = element_blank(),                                 # Removing the grey grid lines
plot.margin = unit(c(1,1,1,1), units = , "cm")))              # Putting a 1 cm margin around the plot
# We can see from the histogram that the data are very skewed - a typical distribution of count abundance data
colourpicker:::colourPickerAddin()
# Filtering the data to get records only from Croatia and Italy using the `filter()` function from the `dplyr` package
vultureITCR <- filter(vulture, Country.list %in% c("Croatia", "Italy"))
View(vulture)
View(vulture)
names(vulture)
# Filtering the data to get records only from Croatia and Italy using the `filter()` function from the `dplyr` package
vultureITCR <- filter(vulture, `Country list` %in% c("Croatia", "Italy"))
View(vultureITCR)
# Using default base graphics
plot(vultureITCR$year, vultureITCR$abundance, col = c("#1874CD", "#68228B"))
(vulture_scatter <- ggplot(vultureITCR, aes(x = year, y = abundance, colour = Country.list)) +  # linking colour to a factor inside aes() ensures that the points' colour will vary according to the factor levels
geom_point())
(vulture_scatter <- ggplot(vultureITCR, aes(x = year, y = abundance, colour = `Country list`)) +  # linking colour to a factor inside aes() ensures that the points' colour will vary according to the factor levels
geom_point())
# Improvement to plot
(vulture_scatter <- ggplot(vultureITCR, aes (x = year, y = abundance, colour = `Country list`)) +
geom_point(size = 2) +                                               # Changing point size
geom_smooth(method = "lm", aes(fill = Country.list, alpha = 0.3)) +               # Adding linear model fit, colour-code by country
theme_bw() +
scale_fill_manual(values = c("#EE7600", "#00868B")) +                # Adding custom colours for solid geoms (ribbon)
scale_colour_manual(values = c("#EE7600", "#00868B"),                # Adding custom colours for lines and points
labels = c("Croatia", "Italy")) +                # Adding labels for the legend
ylab("Griffon vulture abundance\n") +
xlab("\nYear")  +
theme(axis.text.x = element_text(size = 12, angle = 45, vjust = 1, hjust = 1),     # making the years at a bit of an angle
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14, face = "plain"),
panel.grid = element_blank(),                                   # Removing the background grid lines
plot.margin = unit(c(1,1,1,1), units = , "cm"),                 # Adding a 1cm margin around the plot
legend.text = element_text(size = 12, face = "italic"),         # Setting the font for the legend text
legend.title = element_blank(),                                 # Removing the legend title
legend.position = c(0.9, 0.9)))                                 # Setting legend position - 0 is left/bottom, 1 is top/right
View(vultureITCR)
(vulture_scatter <- ggplot(vultureITCR, aes (x = year, y = abundance, colour = `Country list`)) +
geom_point(size = 2) +                                               # Changing point size
geom_smooth(method = "lm", aes(fill = `Country list`, alpha = 0.3)) +               # Adding linear model fit, colour-code by country
theme_bw() +
scale_fill_manual(values = c("#EE7600", "#00868B")) +                # Adding custom colours for solid geoms (ribbon)
scale_colour_manual(values = c("#EE7600", "#00868B"),                # Adding custom colours for lines and points
labels = c("Croatia", "Italy")) +                # Adding labels for the legend
ylab("Griffon vulture abundance\n") +
xlab("\nYear")  +
theme(axis.text.x = element_text(size = 12, angle = 45, vjust = 1, hjust = 1),     # making the years at a bit of an angle
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14, face = "plain"),
panel.grid = element_blank(),                                   # Removing the background grid lines
plot.margin = unit(c(1,1,1,1), units = , "cm"),                 # Adding a 1cm margin around the plot
legend.text = element_text(size = 12, face = "italic"),         # Setting the font for the legend text
legend.title = element_blank(),                                 # Removing the legend title
legend.position = c(0.9, 0.9)))                                 # Setting legend position - 0 is left/bottom, 1 is top/right
(vulture_scatter <- ggplot(vultureITCR, aes (x = year, y = abundance, colour = `Country list`)) +
geom_point(size = 2) +                                               # Changing point size
geom_smooth(method = "lm", aes(fill = `Country list`), alpha = 0.3) +               # Adding linear model fit, colour-code by country
theme_bw() +
scale_fill_manual(values = c("#EE7600", "#00868B")) +                # Adding custom colours for solid geoms (ribbon)
scale_colour_manual(values = c("#EE7600", "#00868B"),                # Adding custom colours for lines and points
labels = c("Croatia", "Italy")) +                # Adding labels for the legend
ylab("Griffon vulture abundance\n") +
xlab("\nYear")  +
theme(axis.text.x = element_text(size = 12, angle = 45, vjust = 1, hjust = 1),     # making the years at a bit of an angle
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14, face = "plain"),
panel.grid = element_blank(),                                   # Removing the background grid lines
plot.margin = unit(c(1,1,1,1), units = , "cm"),                 # Adding a 1cm margin around the plot
legend.text = element_text(size = 12, face = "italic"),         # Setting the font for the legend text
legend.title = element_blank(),                                 # Removing the legend title
legend.position = c(0.9, 0.9)))                                 # Setting legend position - 0 is left/bottom, 1 is top/right
(vulture_scatter <- ggplot(vultureITCR, aes (x = year, y = abundance, colour = `Country list`))
(vulture_scatter <- ggplot(vultureITCR, aes (x = year, y = abundance, colour = `Country list`)))
(vulture_scatter <- ggplot(vultureITCR, aes (x = year, y = abundance, colour = `Country list`)) +
geom_point(size = 2))
# Beautifying
(vulture_boxplot <- ggplot(vultureITCR, aes(Country.list, abundance)) +
geom_boxplot(aes(fill = Country.list)) +
theme_bw() +
scale_fill_manual(values = c("#EE7600", "#00868B")) +               # Adding custom colours
scale_colour_manual(values = c("#EE7600", "#00868B")) +             # Adding custom colours
ylab("Griffon vulture abundance\n") +
xlab("\nCountry")  +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "plain"),
panel.grid = element_blank(),                                 # Removing the background grid lines
plot.margin = unit(c(1,1,1,1), units = , "cm"),               # Adding a margin
legend.position = "none"))                                    # Removing legend - not needed with only 2 factors
(vulture_boxplot <- ggplot(vultureITCR, aes(`Country list`, abundance)) +
geom_boxplot(aes(fill = `Country list`)) +
theme_bw() +
scale_fill_manual(values = c("#EE7600", "#00868B")) +               # Adding custom colours
scale_colour_manual(values = c("#EE7600", "#00868B")) +             # Adding custom colours
ylab("Griffon vulture abundance\n") +
xlab("\nCountry")  +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "plain"),
panel.grid = element_blank(),                                 # Removing the background grid lines
plot.margin = unit(c(1,1,1,1), units = , "cm"),               # Adding a margin
legend.position = "none"))                                    # Removing legend - not needed with only 2 factors
# Calculating species richness using pipes %>% from the dplyr package
richness <- LPI2 %>% filter (`Country list` %in% c("United Kingdom", "Germany", "France", "Netherlands", "Italy")) %>%
group_by(`Country list`) %>%
mutate(richness = (length(unique(Common.Name)))) # create new column based on how many unique common names (or species) there are in each country
# Plotting the species richness
(richness_barplot <- ggplot(richness, aes(x = `Country list`, y = richness)) +
geom_bar(position = position_dodge(), stat = "identity", colour = "black", fill = "#00868B") +
theme_bw() +
ylab("Species richness\n") +
xlab("Country")  +
theme(axis.text.x = element_text(size = 12, angle = 45, vjust = 1, hjust = 1),  # Angled labels, so text doesn't overlap
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14, face = "plain"),
panel.grid = element_blank(),
plot.margin = unit(c(1,1,1,1), units = , "cm")))
richness <- LPI2 %>% filter (`Country list` %in% c("United Kingdom", "Germany", "France", "Netherlands", "Italy")) %>%
group_by(`Country list`) %>%
mutate(richness = (length(unique(Common.Name)))) # create new column based on how many unique common names (or species) there are in each country
richness <- LPI2 %>% filter (`Country list` %in% c("United Kingdom", "Germany", "France", "Netherlands", "Italy")) %>%
group_by(`Country list`) %>%
mutate(richness = (length(unique(Common.Name))))
richness <- LPI2 %>% filter (`Country list` %in% c("United Kingdom", "Germany", "France", "Netherlands", "Italy")) %>%
group_by(`Country list`) %>%
mutate(richness = (length(unique(`Common Name`)))) # create new column based on how many unique common names (or species) there are in each country
# Plotting the species richness
(richness_barplot <- ggplot(richness, aes(x = `Country list`, y = richness)) +
geom_bar(position = position_dodge(), stat = "identity", colour = "black", fill = "#00868B") +
theme_bw() +
ylab("Species richness\n") +
xlab("Country")  +
theme(axis.text.x = element_text(size = 12, angle = 45, vjust = 1, hjust = 1),  # Angled labels, so text doesn't overlap
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14, face = "plain"),
panel.grid = element_blank(),
plot.margin = unit(c(1,1,1,1), units = , "cm")))
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown::stop_server()
blogdown::build_site()
blogdown:::preview_site(startup = TRUE)
blogdown::build_site()
